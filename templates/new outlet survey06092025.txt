<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <title>New Outlet Survey</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='styleedit.css') }}">

    <!-- Define initAutocomplete BEFORE loading Google Maps -->
    <script>
        function initAutocomplete() {
            const addressInput = document.getElementById('OUTLET_ADDRESS');
            const autocomplete = new google.maps.places.Autocomplete(addressInput);

            autocomplete.addListener('place_changed', function () {
                const place = autocomplete.getPlace();

                if (!place.geometry) {
                    alert("No location details available for the selected place.");
                    return;
                }

                const lat = place.geometry.location.lat();
                const lng = place.geometry.location.lng();

                document.getElementById('LAT').value = lat;
                document.getElementById('LONG').value = lng;
            });
        }

        // Make sure the callback is in the global scope
        window.initAutocomplete = initAutocomplete;
    </script>

    <!-- Now load Google Maps after initAutocomplete is defined -->
    <script
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDa4NQbJ9sdPY5xalx0bAp36dHQTzd_o9Q&libraries=places&callback=initAutocomplete"
        async
        defer
    ></script>
</head>

<body>
<a href="{{ url_for('logout') }}" class="btn-logout">Logout</a>
<a href="{{ url_for('user_dashboard') }}" class="btn-dashboard">Return to Dashboard</a>
    {% with messages = get_flashed_messages() %}
  {% if messages %}
    <div class="alert alert-info" role="alert">
      {% for message in messages %}
        {{ message }}
      {% endfor %}
    </div>
  {% endif %}
{% endwith %}

<div class="form-container">
    <h2>New Outlet Survey</h2>
    <form method="POST" enctype="multipart/form-data">

        <!-- Transaction ID -->
        <input type="text" id="TRANSACTIONS_ID" name="TRANSACTIONS_ID" value="{{ transaction_id }}" readonly>
        <!-- Outlet Name -->
        <label for="OUTLET_NAME">Outlet Name</label>
        <input type="text" id="OUTLET_NAME" name="OUTLET_NAME" required/>

        <!-- Mobile -->
        <label for="OUTLET_MOBILE">Outlet Mobile</label>
        <input type="text" id="OUTLET_MOBILE" name="OUTLET_MOBILE" />

        <!-- City -->
        <label for="CITY">City</label>
        <input type="text" id="CITY" name="CITY" required />

        <!-- State -->
        <label for="STATE">State</label>
        <input type="text" id="STATE" name="STATE" required />

        <!-- Pincode -->
        <label for="PINCODE">Pincode</label>
        <input type="text" id="PINCODE" name="PINCODE" required />

        <!-- Outlet Address -->
        <label for="OUTLET_ADDRESS">Outlet Address</label>
        <input type="text" id="OUTLET_ADDRESS" name="OUTLET_ADDRESS" placeholder="Start typing address" required>

        <label for="LAT">Latitude</label>
        <input type="text" id="LAT" name="LAT" readonly>

        <label for="LONG">Longitude</label>
        <input type="text" id="LONG" name="LONG" readonly>
        <button type="button" onclick="getLocationapi()">Get Current Location</button>
        <!-- Longitude 
        <label for="LAT">Latitude</label>
        <input type="text" id="LAT" name="LAT" readonly required/>

        <label for="LONG">Longitude</label>
        <input type="text" id="LONG" name="LONG" readonly required/>
        <button type="button" onclick="getLocation()">Get Current Location</button>-->

        <!-- GST Number -->
        <label for="GSTNO">GST Number</label>
        <input type="text" id="GSTNO" name="GSTNO" />

        <!-- Distributor Code -->
        <label for="DISTRIBUTOR_CODE">Distributor Code</label>
        <input type="text" id="DISTRIBUTOR_CODE" name="DISTRIBUTOR_CODE" />

        <!-- Distributor Name -->
        <label for="DISTRIBUTOR_NAME">Distributor Name</label>
        <input type="text" id="DISTRIBUTOR_NAME" name="DISTRIBUTOR_NAME" required/>

        <!-- Channel -->
        <label for="CHANNEL">Channel</label>
        <input type="text" id="CHANNEL" name="CHANNEL" />

        <!-- Category -->
        <label for="CATEGORY">Volume</label>
        <input type="text" id="CATEGORY" name="CATEGORY" required/>

        <!-- SGA -->
        <label for="SGA">SGA</label>
        <select id="SGA" name="SGA">
            <option value="">-- Select SGA --</option>
            {% for i in range(6) %}
            <option value="{{ i }}">{{ i }}</option>
            {% endfor %}
        </select>

        <!-- SGA Table -->
        <label>SGA Details</label>
        <table id="sgaTable" border="1" style="border-collapse: collapse; width: 100%; margin-top: 10px;">
            <thead>
                <tr>
                    <th>#</th>
                    <th>Working Conditions</th>
                    <th>Product Type</th>
                    <th>Serial No</th>
                    <th>Asset Tag No</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                <!-- Start with 1 empty row -->
                <tr>
                    <td>1</td>
                    <td><input type="text" name="SGA_WORKING_CONDITIONS_0" /></td>
                    <td><input type="text" name="SGA_PRODUCT_TYPE_0" /></td>
                    <td><input type="text" name="SGA_SERIAL_NO_0" /></td>
                    <td><input type="text" name="SGA_ASSEST_TAG_NO_0" /></td>
                    <td><button type="button" onclick="removeRow(this)">Delete</button></td>
                </tr>
            </tbody>
        </table>
        <button type="button" onclick="addRow()" style="margin-top: 10px;">Add Row</button>

        <!-- BAIL ID -->
        <label for="BAIL_ID">BAIL ID</label>
        <input type="text" id="BAIL_ID" name="BAIL_ID" />

        <!-- Asset Serial Image -->
        <label for="IMAGE_UPLOAD_ASSEST_SERIAL_NO">Upload Asset Serial Image:</label>
        <input type="file" name="IMAGE_UPLOAD_ASSEST_SERIAL_NO" accept="image/*" class="form-control" />

        <!-- Outlet Image -->
        <label for="OUTLET_IMAGE">Upload Outlet Image:</label>
        <input type="file" name="OUTLET_IMAGE" accept="image/*" class="form-control" />

        <br /><br />
        <button type="submit">Save</button>
        <a href="{{ url_for('outlet_survey') }}">Cancel</a>
    </form>
</div>

<script>
    document.querySelector('form').addEventListener('submit', function (e) {
        let errors = [];

        const lat = document.getElementById('LAT').value.trim();
        const long = document.getElementById('LONG').value.trim();
        const distributorName = document.getElementById('DISTRIBUTOR_NAME').value.trim();
        const volume = document.getElementById('CATEGORY').value.trim();
        const city = document.getElementById('CITY').value.trim();
        const state = document.getElementById('STATE').value.trim();
        const pincode = document.getElementById('PINCODE').value.trim();
        const address = document.getElementById('OUTLET_ADDRESS').value.trim();

        const assetImageInput = document.querySelector('input[name="IMAGE_UPLOAD_ASSEST_SERIAL_NO"]');
        const outletImageInput = document.querySelector('input[name="OUTLET_IMAGE"]');

        const existingAssetImage = false;
        const existingOutletImage = false;

        if (!lat) errors.push("Latitude is required.");
        if (!long) errors.push("Longitude is required.");
        if (!distributorName) errors.push("Distributor Name is required.");
        if (!volume) errors.push("Volume is required.");
        if (!city) errors.push("City is required.");
        if (!state) errors.push("State is required.");
        if (!pincode) errors.push("Pincode is required.");
        if (!address) errors.push("Outlet Address is required.");

        if (!existingAssetImage && !assetImageInput.value) {
            errors.push("Upload Asset Serial Image is required.");
        }

        if (!existingOutletImage && !outletImageInput.value) {
            errors.push("Upload Outlet Image is required.");
        }

        if (errors.length > 0) {
            e.preventDefault();
            alert("Please fix the following errors:\n\n" + errors.join("\n"));
        }
    });

    function getLocation() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function(position) {
                document.getElementById("LAT").value = position.coords.latitude;
                document.getElementById("LONG").value = position.coords.longitude;
            });
        } else {
            alert("Geolocation is not supported by this browser.");
        }
    }

    function addRow() {
        const tbody = document.querySelector('#sgaTable tbody');
        const rowCount = tbody.rows.length;
        const newRow = document.createElement('tr');

        newRow.innerHTML = `
            <td>${rowCount + 1}</td>
            <td><input type="text" name="SGA_WORKING_CONDITIONS_${rowCount}" /></td>
            <td><input type="text" name="SGA_PRODUCT_TYPE_${rowCount}" /></td>
            <td><input type="text" name="SGA_SERIAL_NO_${rowCount}" /></td>
            <td><input type="text" name="SGA_ASSEST_TAG_NO_${rowCount}" /></td>
            <td><button type="button" onclick="removeRow(this)">Delete</button></td>
        `;
        tbody.appendChild(newRow);
        updateRowNumbers();
    }

    function removeRow(button) {
        const row = button.closest('tr');
        row.remove();
        updateRowNumbers();
    }

    function updateRowNumbers() {
        const tbody = document.querySelector('#sgaTable tbody');
        for (let i = 0; i < tbody.rows.length; i++) {
            tbody.rows[i].cells[0].textContent = i + 1;
            tbody.rows[i].querySelectorAll('input').forEach((input) => {
                const baseName = input.name.split('_').slice(0, -1).join('_');
                input.name = baseName + '_' + i;
            });
        }
    }
    function initAutocomplete() {
        const addressInput = document.getElementById('OUTLET_ADDRESS');
        const autocomplete = new google.maps.places.Autocomplete(addressInput);

        autocomplete.addListener('place_changed', function () {
            const place = autocomplete.getPlace();

            if (!place.geometry) {
                alert("No location details available for the selected place.");
                return;
            }

            const lat = place.geometry.location.lat();
            const lng = place.geometry.location.lng();

            document.getElementById('LAT').value = lat;
            document.getElementById('LONG').value = lng;
        });
    }

    window.initAutocomplete = initAutocomplete;
function getLocationapi() {
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(function(position) {
            document.getElementById("LAT").value = position.coords.latitude;
            document.getElementById("LONG").value = position.coords.longitude;
        }, function(error) {
            alert("Error getting location: " + error.message);
        });
    } else {
        alert("Geolocation is not supported by this browser.");
    }
}
</script>
</body>
</html>
